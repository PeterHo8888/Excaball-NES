	.inesprg 1   ; 1x 16KB PRG code
	.inesmap 0   ; mapper 0 = NROM, no bank swapping
	.inesmir 1   ; background mirroring
	.ineschr 1   ; 1x  8KB CHR data
	
	
palette:
	.db $0f,$2f,$12,$30,$0f,$18,$12,$30,$0f,$2a,$12,$22,$0f,$22,$14,$29 
	
	
	.bank 1
    .org $FFFA     ;first of the three vectors starts here
	.dw NMI        ;when an NMI happens (once per frame if enabled) the 
                   ;processor will jump to the label NMI:
	.dw RESET      ;when the processor first turns on or is reset, it will jump
                   ;to the label RESET:
	.dw 0          ;external interrupt IRQ is not used

;;;;;;;;;;;;;;  
	.bank 0
	.org $0200 ; OAM Copy location $0200
ball_y:     .db  0   ; Y value
ball_t:     .db  0   ; Tile Number
ball_s:     .db  0   ; special byte
ball_x:     .db  0   ; X value
;;;;;;;;;;;;;;;;;;


	.org $8000 

RESET:
	SEI          ; disable IRQs
	CLD          ; disable decimal mode
	LDX #$40
	STX $4017    ; disable APU frame IRQ
	LDX #$FF
	TXS          ; Set up stack
	INX          ; now X = 0
	STX $2000    ; disable NMI
	STX $2001    ; disable rendering
	STX $4010    ; disable DMC IRQs

	jsr vblankwait

clrmem:
	LDA #$00
	STA $0000, x
	STA $0100, x
	STA $0300, x
	STA $0400, x
	STA $0500, x
	STA $0600, x
	STA $0700, x
	LDA #$FE
	STA $0200, x
	INX
	BNE clrmem
   
	jsr vblankwait

	
LoadPPU:
	LDA #%00001000   ; disable NMI, sprites from Pattern Table 0, background from Pattern Table 1
	STA $2000
	LDA #%00010110   ; enable sprites, disable background, no clipping on left side
	STA $2001
 

	;LDA #$00
	;STA $2000
	;STA $2001


LoadPalettes:
	LDA $2002             ; read PPU status to reset the high/low latch
	LDA #$3F
	STA $2006             ; write the high byte of $3F00 address
	LDA #$00
	STA $2006             ; write the low byte of $3F00 address
	LDX #0
LoadPalettesLoop:
	LDA palette, x

	STA $2007             ; write to PPU
	INX
	CPX #16               ; Compare X to hex $10, decimal 16 - copying 16 bytes = 4 sprites
	BNE LoadPalettesLoop
	
;	LDA #0
;	STA $2006  ;PPU_ADDRESS
;	STA $2006
;	STA $2005  ;SCROLL
;	STA $2005


;;;Set some initial ball stats

InitVars:	


	LDA #80
	STA ball_y
	LDA #0
	STA ball_t
	LDA #0
	STA ball_s
	LDA #8
	STA ball_x
	
	LDA #1
	STA ballspeedx
	LDA #5
	STA ballspeedy
	
	LDA #1
	STA ballaccely


;;:Set starting game state
	LDA #STATEPLAYING
	STA gamestate	

	LDA #%10001000   ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
	STA $2000
	LDA #%00011110   ; enable sprites, enable background, no clipping on left side
	STA $2001

Forever:
	JMP Forever
 

NMI:
	LDA #0
	STA $2003       ; set the low byte (00) of the RAM address
	LDA #2
	STA $4014       ; set the high byte (02) of the RAM address, start the transfer


	;;This is the PPU clean up section, so rendering the next frame starts properly.
	;LDA #%10001000   ; enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
	;STA $2000
	;LDA #%00011110   ; enable sprites, enable background, no clipping on left side
	;STA $2001
		
  ;;;all graphics updates done by here, run game engine


	JSR ReadController  ;;get the current button data for player 1
	
GameEngine:  
	LDA gamestate
	CMP #STATETITLE
	BEQ EngineTitle    ;;game is displaying title screen
   
	LDA gamestate
	CMP #STATEGAMEOVER
	BEQ EngineGameOver  ;;game is displaying ending screen
  
	LDA gamestate
	CMP #STATEPLAYING
	BEQ EnginePlaying   ;;game is playing
GameEngineDone:  
	
	;JMP Forever     ;jump back to Forever, infinite loop, waiting for NMI
	RTI
 
 
 
 
;;;;;;;;
 
EngineTitle:
	;;if start button pressed
	;;  turn screen off
	;;  load game screen
	;;  set starting paddle/ball position
	;;  go to Playing State
	;;  turn screen on
	JMP GameEngineDone

;;;;;;;;; 
 
EngineGameOver:
	;;if start button pressed
	;;  turn screen off
	;;  load title screen
	;;  go to Title State
	;;  turn screen on 
	JMP GameEngineDone
 
;;;;;;;;;;;
 
EnginePlaying:
Collision:

	LDA ballmove
	CMP #0
	BEQ CheckDown
	
	LDA ballmove
	CMP #1
	BEQ CheckLeft
	
	LDA ballmove
	CMP #2
	BEQ CheckRight
	
	JMP CheckDown

CheckRight:
	LDA ball_x
	CMP #RIGHTWALL
	BNE CheckDown
	LDA ball_x
	SBC #1
	STA ball_x
	JMP CheckDown
	
CheckLeft:
	LDA ball_x
	CMP #LEFTWALL
	BNE CheckDown
	LDA ball_x
	CLC
	ADC #1
	STA ball_x
	JMP CheckDown
	
CheckUp:
	LDA ball_y
	CMP #TOPWALL
	;BCC CheckDown
	

CheckDown:
	LDA ball_y
	CMP #BOTTOMWALL
	BCC CollisionDone
	LDA #0
	STA ballspeedy
	
SkipGravity:
	JMP GameEngineDone
	
CollisionDone:

Gravity:
	
	LDA ballspeedy
	CLC
	ADC ballaccely
	STA ballspeedy
	
	LDA ball_y
	CLC
	ADC ballspeedy
	STA ball_y

GravityDone:


 
	JMP GameEngineDone
 

 
 
 
ReadController:
	LDA #$01
	STA $4016
	LDA #$00
	STA $4016
  
  
	; A, B, Select, Start, Up, Down, Left, Right
	LDA $4016 ; A
	;AND #1
	;BNE APressed
	
	LDA $4016 ; B
	LDA $4016 ; SEL
	LDA $4016 ; START
	LDA $4016 ; UP
	LDA $4016 ; DOWN
  
	LDA $4016 ; LEFT
	AND #1
	BNE LeftPressed
  

	LDA $4016 ; RIGHT
	AND #1
	BNE RightPressed
	
	
	JMP NothingPressed
  
APressed:
	LDA #5
	STA ballspeedy
	LDA ball_y
	CLC
	ADC ballspeedy
	STA ball_y
	JMP EndPressed
	
  
LeftPressed:
	LDA ball_x
	SEC
	SBC #1
	STA ball_x
	LDA #1
	STA ballmove
	JMP EndPressed
	
RightPressed:
	LDA ball_x
	CLC
	ADC #1
	STA ball_x
	LDA #2
	STA ballmove
	JMP EndPressed
 

NothingPressed:
	LDA #0
	STA ballmove
 
EndPressed:
	RTS   
	
;;;;;;;;;;;;;;
;;;;;;;;;;;;;;  
vblankwait:
	BIT $2002
	BPL vblankwait
	RTS
;;;;;;;;;;;;;;





;; DECLARE SOME VARIABLES HERE
	.rsset $0000  ;;start variables at ram location 0


gamestate   .rs 1  ; .rs 1 means reserve one byte of space
ballmove    .rs 1  ; ball is being moved by player
ballspeedx  .rs 1  ; ball horizontal speed per frame
ballspeedy  .rs 1  ; ball vertical speed per frame
ballaccely  .rs 1  ; ball vertical acceleration per frame
score       .rs 1  ; player 1 score, 0-15
deaths      .rs 1  ; player 2 score, 0-15

;; DECLARE SOME CONSTANTS HERE
STATETITLE     = $00  ; displaying title screen
STATEPLAYING   = $01  ; move ball, check for collisions
STATEGAMEOVER  = $02  ; displaying game over screen

RIGHTWALL      = $F0  ; when ball reaches one of these, do something
TOPWALL        = $20
BOTTOMWALL     = $D0
LEFTWALL       = $00
BALLSPEEDX     = $01
BALLACCELY     = $01
sprite_RAM = $0200
;;;;;;;;

Ball_graphics:
	.db $00



;;;;;;;;;;;;;;;;
  
	.bank 2
	.org $0000

	.incbin "bkg.chr"
	.incbin "spr.chr"